{"version":3,"sources":["focus-visible.js"],"names":["global","factory","exports","module","define","amd","this","document","callback","loaded","load","readyState","addEventListener","window","onDOMReady","hadKeyboardModalityEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","elementTypesWhitelist","checkbox","radio","keyboardNavWhitelist","ArrowDown","ArrowLeft","ArrowRight","ArrowUp","Tab","modifierKeysWhitelist","Alt","AltGraph","CapsLock","Control","Meta","NumLock","Shift","isValidFocusTarget","el","nodeName","onPointerDown","e","addInitialPointerMoveListeners","onInitialPointerMove","target","toLowerCase","removeEventListener","activeElement","key","type","setTimeout","tagName","readonly","contentEditable","classList","contains","add","setAttribute","clearTimeout","hasAttribute","remove","removeAttribute","visibilityState","body"],"mappings":"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","file":"focus-visible.min.js","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\n/**\n * https://github.com/WICG/focus-ring\n */\nfunction init() {\n  // var hadKeyboardEvent = true;\n  var hadKeyboardModalityEvent = true; // Defining as - A keyboard initiated event that caused a different element to have and keep focus (keep meaning - focus is maintained while awaiting next user input).\n  var hadFocusVisibleRecently = false;\n  var hadFocusVisibleRecentlyTimeout = null;\n  var elementTypesWhitelist = {\n    // A: true,\n    checkbox: true,\n    // date: true,\n    // datetime: true,\n    // 'datetime-local': true,\n    // email: true,\n    // number: true,\n    // month: true,\n    // password: true,\n    radio: true,\n    // search: true,\n    // tel: true,\n    // text: true,\n    // TEXTAREA: true\n    // time: true,\n    // url: true,\n    // week: true\n  };\n  var keyboardNavWhitelist = {\n    'ArrowDown': true,\n    'ArrowLeft': true,\n    'ArrowRight': true,\n    'ArrowUp': true,\n    'Tab': true\n  };\n  var modifierKeysWhitelist = {\n    'Alt': true,\n    'AltGraph': true,\n    'CapsLock': true,\n    'Control': true,\n    'Meta': true,\n    'NumLock': true,\n    'Shift': true\n  }\n\n  /**\n   * Helper function for legacy browsers and iframes which sometimes focus\n   * elements like document and body.\n   * @param {Element} el\n   */\n  function isValidFocusTarget(el) {\n    if (\n      el &&\n      el !== document &&\n      el.nodeName !== 'HTML' &&\n      el.nodeName !== 'BODY'\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Checks a whitelist to see whether the given element would benefit from the\n   * `focus-visible` class being added.\n   * @param {Element} el\n   * @return {boolean}\n   */\n  function requiresFocusVisible(el) {\n    var type = el.type;\n    var tagName = el.tagName;\n\n    if (elementTypesWhitelist[tagName] && !el.readonly) {\n      return true;\n    } else if (tagName == 'INPUT' && elementTypesWhitelist[type] && !el.readonly) {\n      return true;\n    } else if (el.contentEditable == 'true') {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Add the `focus-visible` class to the given element if it was not added by\n   * the author.\n   * @param {Element} el\n   */\n  function addFocusVisibleClass(el) {\n    if (el.classList.contains('focus-visible')) {\n      return;\n    }\n    el.classList.add('focus-visible');\n    el.setAttribute('data-focus-visible-added', '');\n  }\n\n  /**\n   * Remove the `focus-visible` class from the given element if it was not\n   * originally added by the author.\n   * @param {Element} el\n   */\n  function removeFocusVisibleClass(el) {\n    if (!el.hasAttribute('data-focus-visible-added')) {\n      return;\n    }\n    el.classList.remove('focus-visible');\n    el.removeAttribute('data-focus-visible-added');\n  }\n\n  /**\n   * Treat `keydown` as a a possible trigger that the user is entering keyboard modality.\n   * Apply `focus-visible` to any current active element and keep track\n   * of our keyboard modality state with `hadKeyboardModalityEvent`.\n   * @param {Event} e\n   */\n  function onKeyDown(e) {\n    if (isValidFocusTarget(document.activeElement)) {\n      if (modifierKeysWhitelist[e.key]) {\n        return; // Handle as quickly as possible.\n      } else if (document.activeElement.type === 'radio' && e.key !== 'Tab' && (keyboardNavWhitelist[e.key])) {\n        // With radio buttons - using the arrow keys should actually addFocusVisibleClass to the soon to be document.activeElement instead of the current document.activeElement.\n        setTimeout(function(){\n          hadKeyboardModalityEvent = true;\n          // addFocusVisibleClass(document.activeElement);\n        }, 1);\n      } else if (keyboardNavWhitelist[e.key]) {\n        hadKeyboardModalityEvent = true;\n        // addFocusVisibleClass(document.activeElement);\n      } else {\n        hadKeyboardModalityEvent = false;\n      }\n    }\n\n    // hadKeyboardEvent = true;\n  }\n\n  /**\n   * If at any point a user clicks with a pointing device, ensure that we change\n   * the modality away from keyboard.\n   * This avoids the situation where a user presses a key on an already focused\n   * element, and then clicks on a different element, focusing it with a\n   * pointing device, while we still think we're in keyboard modality.\n   * @param {Event} e\n   */\n  function onPointerDown(e) {\n    // hadKeyboardEvent = false;\n    hadKeyboardModalityEvent = false;\n  }\n\n  /**\n   * On `focus`, add the `focus-visible` class to the target if:\n   * - the target received focus as a result of keyboard navigation, or\n   * - the event target is an element that will likely require interaction\n   *   via the keyboard (e.g. a text box)\n   * @param {Event} e\n   */\n  function onFocus(e) {\n    // Prevent IE from focusing the document or HTML element.\n    if (!isValidFocusTarget(e.target)) {\n      return;\n    }\n\n    // if (hadKeyboardEvent) {\n    if (hadKeyboardModalityEvent) {\n      if (requiresFocusVisible(e.target)) {\n  \n        addFocusVisibleClass(e.target);\n        // hadKeyboardEvent = false;\n        hadKeyboardModalityEvent = false;\n      }\n    }\n  }\n\n  /**\n   * On `blur`, remove the `focus-visible` class from the target.\n   * @param {Event} e\n   */\n  function onBlur(e) {\n    if (!isValidFocusTarget(e.target)) {\n      return;\n    }\n\n    if (e.target.classList.contains('focus-visible')) {\n      // To detect a tab/window switch, we look for a blur event followed\n      // rapidly by a visibility change.\n      // If we don't see a visibility change within 100ms, it's probably a\n      // regular focus change.\n      hadFocusVisibleRecently = true;\n      window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {\n        hadFocusVisibleRecently = false;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n      }, 100);\n      removeFocusVisibleClass(e.target);\n    }\n  }\n\n  /**\n   * If the user changes tabs, keep track of whether or not the previously\n   * focused element had .focus-visible.\n   * @param {Event} e\n   */\n  function onVisibilityChange(e) {\n    if (document.visibilityState == 'hidden') {\n      // If the tab becomes active again, the browser will handle calling focus\n      // on the element (Safari actually calls it twice).\n      // If this tab change caused a blur on an element with focus-visible,\n      // re-apply the class when the user switches back to the tab.\n      if (hadFocusVisibleRecently) {\n        // hadKeyboardEvent = true;\n        hadKeyboardModalityEvent = true;\n      }\n      addInitialPointerMoveListeners();\n    }\n  }\n\n  /**\n   * Add a group of listeners to detect usage of any pointing devices.\n   * These listeners will be added when the polyfill first loads, and anytime\n   * the window is blurred, so that they are active when the window regains\n   * focus.\n   */\n  function addInitialPointerMoveListeners() {\n    document.addEventListener('mousemove', onInitialPointerMove);\n    document.addEventListener('mousedown', onInitialPointerMove);\n    document.addEventListener('mouseup', onInitialPointerMove);\n    document.addEventListener('pointermove', onInitialPointerMove);\n    document.addEventListener('pointerdown', onInitialPointerMove);\n    document.addEventListener('pointerup', onInitialPointerMove);\n    document.addEventListener('touchmove', onInitialPointerMove);\n    document.addEventListener('touchstart', onInitialPointerMove);\n    document.addEventListener('touchend', onInitialPointerMove);\n  }\n\n  function removeInitialPointerMoveListeners() {\n    document.removeEventListener('mousemove', onInitialPointerMove);\n    document.removeEventListener('mousedown', onInitialPointerMove);\n    document.removeEventListener('mouseup', onInitialPointerMove);\n    document.removeEventListener('pointermove', onInitialPointerMove);\n    document.removeEventListener('pointerdown', onInitialPointerMove);\n    document.removeEventListener('pointerup', onInitialPointerMove);\n    document.removeEventListener('touchmove', onInitialPointerMove);\n    document.removeEventListener('touchstart', onInitialPointerMove);\n    document.removeEventListener('touchend', onInitialPointerMove);\n  }\n\n  /**\n   * When the polfyill first loads, assume the user is in keyboard modality.\n   * If any event is received from a pointing device (e.g. mouse, pointer,\n   * touch), turn off keyboard modality.\n   * This accounts for situations where focus enters the page from the URL bar.\n   * @param {Event} e\n   */\n  function onInitialPointerMove(e) {\n    // Work around a Safari quirk that fires a mousemove on <html> whenever the\n    // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n    if (e.target.nodeName.toLowerCase() === 'html') {\n      return;\n    }\n\n    // hadKeyboardEvent = false;\n    hadKeyboardModalityEvent = false;\n    removeInitialPointerMoveListeners();\n  }\n\n  document.addEventListener('keydown', onKeyDown, true);\n  document.addEventListener('mousedown', onPointerDown, true);\n  document.addEventListener('pointerdown', onPointerDown, true);\n  document.addEventListener('touchstart', onPointerDown, true);\n  document.addEventListener('focus', onFocus, true);\n  document.addEventListener('blur', onBlur, true);\n  document.addEventListener('visibilitychange', onVisibilityChange, true);\n  addInitialPointerMoveListeners();\n\n  document.body.classList.add('js-focus-visible');\n}\n\n/**\n * Subscription when the DOM is ready\n * @param {Function} callback\n */\nfunction onDOMReady(callback) {\n  var loaded;\n\n  /**\n   * Callback wrapper for check loaded state\n   */\n  function load() {\n    if (!loaded) {\n      loaded = true;\n\n      callback();\n    }\n  }\n\n  if (document.readyState === 'complete') {\n    callback();\n  } else {\n    loaded = false;\n    document.addEventListener('DOMContentLoaded', load, false);\n    window.addEventListener('load', load, false);\n  }\n}\n\nif (typeof document !== 'undefined') {\n  onDOMReady(init);\n}\n\n})));\n"]}